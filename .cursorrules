# Snowflake2025 - Cursor Rules for AI Agents

## üö® CRITICAL: Environment Requirements

**ALWAYS run these commands first:**
```bash
source hex_ai_env/bin/activate
export PYTHONPATH=.
```

**Or use the setup script:**
```bash
./scripts/setup_environment.sh
```

**Then validate the environment:**
```bash
python scripts/validate_environment.py
```

## Principles
1. Strongly to fail fast and catch bugs. Avoid fallback mechanisms -- these can hide problems, producing silent failures.
2. Be very careful about memory usage when handling the data. A common pattern is for coding agents ot try to read in all of the data to calculate things. *NEVER READ IN LARGE AMOUNTS OF DATA at once*.
3. Avoid duplicating code and forking the code path unnecessarily. Use existing utilities. When we update, clean up old code paths.
4. Use `PYTHONPATH=.` for portability, rather than absolute paths
5. Do not try to write your own hex games, ask me for game sequences that achieve certain goals. In trmph format here are some sequences that you can use:
 - A finished game where BLUE has won: g1a7g2b7g3c7g4d7g5e7g6f7g8h7g9i7g10j7g11k7g12l7g13m7g7
 - A finished game where RED has won: a1g1a7g2b7g3c7g4d7g5e7g6f7g8h7g9i7g10j7g11k7g12l7g13m7g7
 - An unfinished game where BLUE can win next move by playing at g7 (6,6) g1a7g2b7g3c7g4d7g5e7g6f7g8h7g9i7g10j7g11k7g12l7g13m7
 - An unfinished game where RED can win next move by playing at g7 (6,6) a1g1a7g2b7g3c7g4d7g5e7g6f7g8h7g9i7g10j7g11k7g12l7g13m7
  - An unfinished game where I expect a high win probability for RED from the network
    red_is_winning = "#13,a2g7f6e8d7c9b8b10h8i6j7k5l6l4", and for BLUE:
    blue_is_winning = a2g7i6j4h5i3g4h2f3g1e2j7h8g10i9h11j10i12k11j13l12
 You can convert these sequences to other formats using the functions in hex_ai/utils/format_conversion.py
  - Similarly: when you want to grab a model, use the utilities to help you. hex_ai/inference/model_config.py gives you a way to get an up to date model.
 - Invalid states and any similar issues: Do not 'handle' these in the sense of falling back to some default value -- CRASH. Crashing helps me find bugs and avoid silent failures. Ths code is under rapid development and my priority is to find issues and make it correct (and clear and maintainable), not to build some loong running server that never goes down.
 - Do *not* focus on backward compatibility. If things change we'll update upstream and downstream code to have one clean modern approach. We don't want adapters and logic to handle old methods -- the code becomes hard to maintan then. Right now it's not a problem to just update other parts of the code. If it's too much to do at once, leave some TODO statements or similar to track what subsequent updates are needed to use the new approach. 
 - When writing code to test a fix, place it in temp/ and delete it when finished.
 - If running code to check that it works, but mindful of how computationally intensive it is! Creating more than 3 games takes time, generating move with more than e.g. 100 MCTS simulations per move takes time.
  - Don't aim to maintain backward compatibility or build compatibility layers for out of date interfaces. Instead build single clean code paths. If in doubt, STOP and explain the issue, then we can decide how to resolve call-sites with different patterns, or similar issues.

For more on the environment:
1. See `AGENT_GUIDANCE.md` for more setup instructions
2. Run `python scripts/validate_environment.py` to check setup
3. **Understand structure**: Review `scripts/agent_setup.py` for project overview

## üìÅ Project Structure

- `hex_ai/` - Core library modules (models, training, inference, etc.)
- `scripts/` - Entry point scripts (training, tournaments, self-play, data processing)
- `tests/` - Test suite
- `data/` - Game data
- `checkpoints/` - Model checkpoints
- `write_ups/technical_debt_tracker.md` - Known issues and cleanup tasks

## üéØ Main Entry Points

- **Training**: `scripts/hyperparam_sweep.py`
- **Tournaments**: `scripts/run_tournament.py`
- **Self-play**: `scripts/run_large_selfplay.py`
- **Data Processing**: `scripts/process_all_trmph.py`

## ‚ö†Ô∏è Important Patterns

### Environment Validation
Environment validation happens automatically when importing `hex_ai`:
```python
import hex_ai  # This automatically validates environment
```

**The validation checks:**
- Virtual environment is activated (`hex_ai_env`)
- PYTHONPATH includes project root (accepts `PYTHONPATH=.`)

**No manual validation calls needed** - it's handled automatically in `hex_ai/__init__.py`

### Import Patterns
Imports should prefer using the `hex_ai.` prefix over e.g. ..
```python
from hex_ai.models import HexModel
from hex_ai.training_orchestration import run_hyperparameter_tuning_current_data
```

### Testing
Tests must be run with PYTHONPATH set:
```bash
PYTHONPATH=. pytest tests/
```

## üìù Code Style Guidelines

1. **Use type hints** - Most functions have type annotations
2. **Add docstrings** - Follow existing documentation style