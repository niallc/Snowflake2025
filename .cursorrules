# Snowflake2025 - Cursor Rules for AI Agents

## üö® CRITICAL: Environment Requirements

**ALWAYS run these commands first:**
```bash
source hex_ai_env/bin/activate
export PYTHONPATH=.
```

**Or use the setup script:**
```bash
./scripts/setup_environment.sh
```

**Then validate the environment:**
```bash
python scripts/validate_environment.py
```

## Principles
1. Strongly to fail fast and catch bugs. Avoid fallback mechanisms -- these can hide problems, producing silent failures.
2. Be very careful about memory usage when handling the data. A common pattern is for coding agents ot try to read in all of the data to calculate things. *NEVER READ IN LARGE AMOUNTS OF DATA at once*.
3. Avoid duplicating code and forking the code path unnecessarily. Use existing utilities. When we update, clean up old code paths.
4. Use `PYTHONPATH=.` for portability, rather than absolute paths
5. Do not try to write your own hex games, ask me for game sequences that achieve certain goals. In trmph format here are some sequences that you can use:
 - A finished game where BLUE has won: g1a7g2b7g3c7g4d7g5e7g6f7g8h7g9i7g10j7g11k7g12l7g13m7g7
 - A finished game where RED has won: a1g1a7g2b7g3c7g4d7g5e7g6f7g8h7g9i7g10j7g11k7g12l7g13m7g7
 - An unfinished game where BLUE can win next move by playing at g7 (6,6) g1a7g2b7g3c7g4d7g5e7g6f7g8h7g9i7g10j7g11k7g12l7g13m7
 - An unfinished game where RED can win next move by playing at g7 (6,6) a1g1a7g2b7g3c7g4d7g5e7g6f7g8h7g9i7g10j7g11k7g12l7g13m7
 You can convert these sequences to other formats using the functions in hex_ai/utils/format_conversion.py
 

For more on the environment:
1. See `AGENT_GUIDANCE.md` for more setup instructions
2. Run `python scripts/validate_environment.py` to check setup
3. **Understand structure**: Review `scripts/agent_setup.py` for project overview

## üìÅ Project Structure

- `hex_ai/` - Core library modules (models, training, inference, etc.)
- `scripts/` - Entry point scripts (training, tournaments, self-play, data processing)
- `tests/` - Test suite
- `data/` - Game data
- `checkpoints/` - Model checkpoints
- `write_ups/technical_debt_tracker.md` - Known issues and cleanup tasks

## üéØ Main Entry Points

- **Training**: `scripts/hyperparam_sweep.py`
- **Tournaments**: `scripts/run_tournament.py`
- **Self-play**: `scripts/run_large_selfplay.py`
- **Data Processing**: `scripts/process_all_trmph.py`

## ‚ö†Ô∏è Important Patterns

### Environment Validation
Environment validation happens automatically when importing `hex_ai`:
```python
import hex_ai  # This automatically validates environment
```

**The validation checks:**
- Virtual environment is activated (`hex_ai_env`)
- PYTHONPATH includes project root (accepts `PYTHONPATH=.`)

**No manual validation calls needed** - it's handled automatically in `hex_ai/__init__.py`

### Import Patterns
Imports should prefer using the `hex_ai.` prefix over e.g. ..
```python
from hex_ai.models import HexModel
from hex_ai.training_orchestration import run_hyperparameter_tuning_current_data
```

### Testing
Tests must be run with PYTHONPATH set:
```bash
PYTHONPATH=. pytest tests/
```

## üìù Code Style Guidelines

1. **Use type hints** - Most functions have type annotations
2. **Add docstrings** - Follow existing documentation style