{
  "customRules": "# AI Coding Instructions & Rules\n\n## Rule 1: Code Generation & Modification\n\n- **Avoid Duplication:** Please try to avoid writing a new function if a similar one exists. I'd appreciate you checking the codebase, especially `src/lib/` and `src/utils/`, for existing utilities.\n- **Prioritize New Scripts:** It's often better to create new files in the `scripts/` directory for one-off tasks.\n- **Confirm Core Edits:** Please be cautious when editing core application library files (e.g., in `src/lib/`). Before modifying these, it would be helpful if you state which file you intend to change, why, and ask for my confirmation.\n\n## Rule 2: File System Operations\n\n- **General Deletion:** Be careful when using `rm` or `rm -rf`, especially on source code files that you didn't create yourself in this session.\n- **Safe Deletion Protocol:** For important files, a 'safe delete' by moving them to `./Trash` is a good approach.\n  - **Example Process:**\n    1.  Create a dated subdirectory: `mkdir -p ./Trash/$(date +%Y-%m-%d)`\n    2.  Move the file: `mv path/to/important_file ./Trash/$(date +%Y-%m-%d)/`\n- **Safe Move Protocol:** When using `mv` to rename or move files, it's a good idea to use the `-n` (no-clobber) flag to avoid overwriting files.\n  - **Example:** `mv -n source_file.js destination_directory/`\n\n## Rule 3: Proactive Code Quality Analysis\n\n- **Continuous Review:** As you work, feel free to point out code that seems redundant, unused, or overly complex.\n- **Flagging Mechanism:** A good way to flag this is with a comment, like: `// AI-REFACTOR-SUGGESTION: [Your brief explanation here]`."
}